#pragma config(I2C_Usage, I2C1, i2cSensors)
#pragma config(Sensor, in1,    ,               sensorGyro)
#pragma config(Sensor, in2,    gybro,          sensorGyro)
#pragma config(Sensor, dgtl1,  quadR,          sensorQuadEncoder)
#pragma config(Sensor, dgtl3,  quadL,          sensorQuadEncoder)
#pragma config(Sensor, dgtl5,  rightBotStopper, sensorDigitalIn)
#pragma config(Sensor, dgtl6,  leftBotStopper, sensorDigitalIn)
#pragma config(Sensor, dgtl7,  pneumHouse,     sensorDigitalOut)
#pragma config(Sensor, dgtl8,  botRightButton, sensorDigitalIn)
#pragma config(Sensor, dgtl9,  rightTopStopper, sensorDigitalIn)
#pragma config(Sensor, dgtl10, leftTopStopper, sensorDigitalIn)
#pragma config(Sensor, dgtl11, topLeftButton,  sensorDigitalIn)
#pragma config(Sensor, dgtl12, botLeftButton,  sensorDigitalIn)
#pragma config(Sensor, I2C_1,  towerEncoder,   sensorQuadEncoderOnI2CPort,    , AutoAssign)
#pragma config(Sensor, I2C_2,  chassisEncoder, sensorQuadEncoderOnI2CPort,    , AutoAssign)
#pragma config(Motor,  port1,           towerR,        tmotorVex393, openLoop, reversed, encoder, encoderPort, I2C_1, 1000)
#pragma config(Motor,  port2,           intakeT2,      tmotorVex393, openLoop, reversed)
#pragma config(Motor,  port3,           chassisRF,     tmotorVex393, openLoop, reversed)
#pragma config(Motor,  port4,           chassisRB,     tmotorVex393, openLoop, reversed)
#pragma config(Motor,  port5,           intakeT,       tmotorVex393, openLoop)
#pragma config(Motor,  port6,           intakeB,       tmotorVex393, openLoop, reversed)
#pragma config(Motor,  port7,           chassisLB,     tmotorVex393, openLoop, encoder, encoderPort, I2C_2, 1000)
#pragma config(Motor,  port8,           chassisLF,     tmotorVex393, openLoop)
#pragma config(Motor,  port9,           strafe,        tmotorVex393, openLoop, reversed)
#pragma config(Motor,  port10,          towerL,        tmotorVex393, openLoop)
#define TOWERMOVE(x) motor[towerR] = 127*x; motor[towerL] = 127*x;

//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

 #pragma platform(VEX)

//Competition Control and Duration Settings
#pragma competitionControl(Competition)
#pragma autonomousDuration(20)
#pragma userControlDuration(120)

#include "Vex_Competition_Includes.c"   //Main competition background code...do not modify! <-- NO FUCK YOU
/////////////////////////////////////////////////////////////////////////////////////////
//
//                          Pre-Autonomous Functions
//
// You may want to perform some actions before the competition starts. Do them in the
// following function.
//
/////////////////////////////////////////////////////////////////////////////////////////
void chassis(int speed)
{
  motor[chassisLB] = speed*32;
	motor[chassisLF] = speed*32;
	motor[chassisRF] = speed*32;
	motor[chassisRB] = speed*32;
}
void tower(int dir)
{
	//motor[towerLB] = 127*dir;
	motor[towerL] = 127*dir;
	motor[towerR] = 127*dir;
	//motor[towerRB] = 127*dir;
}
void towerIdle()
{
	motor[towerL] = 15;
	motor[towerR] = 15;
}
void towerDownCurrent()
{
	motor[towerL] = -16;
	motor[towerR] = -16;
}
void intake(int dir)
{
	motor[intakeT] = 65*dir;
	motor[intakeT2] = 65*dir;
}
void chassisStop()
{
	motor[chassisLB] = 0;
	motor[chassisLF] = 0;
	motor[chassisRB] = 0;
	motor[chassisRF] = 0;
}
void gyroTurn(int speed, int degrees)
{
	motor[chassisLB] = speed*32;
	motor[chassisLF] = speed*32;
	motor[chassisRF] = -speed*32;
	motor[chassisRB] = -speed*32;
	while(abs(SensorValue[gybro]) < degrees*10){}
	chassisStop();
}
void chassisSensorMove(int distance, int speed)
{
	SensorValue[chassisEncoder] = 0;
	chassis(speed);
	while(abs(SensorValue[chassisEncoder]) < distance){}
	chassis(0);
}
void towerSensorMove(int distance, int direction)
{
	SensorValue[towerEncoder] = 0;
	tower(direction);
	while(abs(SensorValue[towerEncoder]) < distance){}
	tower(0);
}
void pre_auton()
{
  // Set bStopTasksBetweenModes to false if you want to keep user created tasks running between
  // Autonomous and Tele-Op modes. You will need to manage all user created tasks if set to false.
  bStopTasksBetweenModes = true;

	// All activities that occur before the competition starts
	// Example: clearing encoders, setting servo positions, ...
  motor[towerL] = -20;
  motor[towerR] = -20;
}
/////////////////////////////////////////////////////////////////////////////////////////
//
//                                 Autonomous Task
//
// This task is used to control your robot during the autonomous phase of a VEX Competition.w
// You must modify the code to add your own robot specific commands here.
//
/////////////////////////////////////////////////////////////////////////////////////////

task autonomous()
{
	TOWERMOVE(1);
	towerDownCurrent();
	while(sensorValue[botLeftButton]){}
	SensorValue[pneumHouse] = 1;
	wait10Msec(30);
	wait10Msec(25);
	SensorValue[pneumHouse] = 0;
	while(SensorValue[topLeftButton]){}
	SensorValue[quadL] = 0;
	SensorValue[quadR] = 0;
	SensorValue[gybro] = 0;
	SensorValue[towerEncoder] = 0;
	int quadCheck = 0;
	if(SensorValue[botRightButton])
	{
	intake(2);
	chassisSensorMove(750, 3);
	chassisSensorMove(100, 2);
	wait10Msec(10);
	chassisSensorMove(-50, 2);
	wait10Msec(10);
	chassisSensorMove(100, 2);
	wait10Msec(10);
	chassisSensorMove(-50, 2);
	gyroTurn(2, 15);
	wait10Msec(10);
	gyroTurn(-2, 15);
	intake(0);
	/*motor[intakeT] = 127;
	chassisSensorMove(100, 2);
	gyroTurn(-2, 75);
	intake(2);
	chassisSensorMove(500, 3);
	motor[intakeT] = 127;
	chassisSensorMove(600, 3);
	intake(2);
	chassisSensorMove(250, 2);
	wait10Msec(10);
	chassisSensorMove(-50, 2);
	wait10Msec(10);
	chassisSensorMove(100, 2);
	wait10Msec(10);
	chassisSensorMove(-50, 2);
	wait10Msec(10);
	chassisSensorMove(100, 2);
	wait10Msec(10);
	chassisSensorMove(-50, 2);
	wait10Msec(10);
	chassisSensorMove(120, 2);
	gyroTurn(2, 15);
	wait10Msec(10);
	gyroTurn(-2, 15);
	intake(0);
	motor[intakeT] = 127;
	chassisSensorMove(1200, -3);
	gyroTurn(2, 70);*/
	wait10Msec(10);
	motor[strafe] = 127;
	wait10Msec(40);
	motor[strafe] = 0;
	intake(2);
	chassisSensorMove(500, 2);
	wait10Msec(10);
	chassisSensorMove(50, -2);
	wait10Msec(10);
	chassisSensorMove(50, 2);
	wait10Msec(10);
	intake(0);
	chassisSensorMove(450, -3);
	tower(1);
	while(abs(SensorValue[towerEncoder]) < 1100){}
	towerIdle();
	chassisSensorMove(650, 3);
	intake(-2);
	wait10Msec(200);
	intake(0);
	chassisSensorMove(450, -3);
	tower(-1);
	while(abs(SensorValue[towerEncoder]) > 50){}
	towerDownCurrent();
	intake(2);
	chassisSensorMove(1000, 3);
	intake(0);
	}
	/*
	wait10Msec(30);
	intake(0);
	towerSensorMove(1070, 1);
	towerIdle();
	motor[strafe] = 127;
	wait10Msec(50);
	motor[strafe] = 0;
	chassisSensorMove(60, 2);
	intake(-1);
	wait10Msec(100);
	intake(0);
	chassisSensorMove(100, -2);
	motor[strafe] = 127;
	wait10Msec(100);
	motor[strafe] = 0;
	chassisSensorMove(150, 3);
	intake(-1);
	wait10Msec(100);
	intake(0);*/
}

/////////////////////////////////////////////////////////////////////////////////////////
//
//                                 User Control Task
//
// This task is used to control your robot during the user control phase of a VEX Competition.
// You must modify the code to add your own robot specific commands here.
//
/////////////////////////////////////////////////////////////////////////////////////////

task usercontrol()
{
	// User control code here, inside the loop
	SensorValue[towerEncoder] = 0;
	//int encoderValue1, encoderValue2, armHasBeenAdjusted, armHasBeenAdjusted2 = 0;
	//int current = 15;
	while (true)
	{
		/*if(VexRT[Btn6U] || VexRT[Btn6D])
		{
			armHasBeenAdjusted = 1;
			armHasBeenAdjusted2 = 1;
		}
		else if(armHasBeenAdjusted && (!VexRT[Btn6U] && !VexRT[Btn6D]))
		{
			armHasBeenAdjusted = 0;
			if(armHasBeenAdjusted2)
			{
				encoderValue1 = SensorValue[towerEncoder];
				armHasBeenAdjusted2 = 0;
			}
		}
		if(!armHasBeenAdjusted)
		{
			if((encoderValue1+threshold) < SensorValue[towerEncoder])
			{
				current++;
			}
			else if((encoderValue1-threshold) > SensorValue[towerEncoder])
			{
				current--;
			}
			encoderValue1 = SensorValue[towerEncoder];
		}*/
	 	motor[chassisLB] = VexRT[Ch3];
	 	motor[chassisLF] = VexRT[Ch3];
	 	motor[chassisRF] = VexRT[Ch2];
	 	motor[chassisRB] = VexRT[Ch2];
	 	motor[intakeT] = VexRT[Btn5U]*127 - VexRT[Btn5D]*127;
	 	motor[intakeT2] = VexRT[Btn5U]*127 - VexRT[Btn5D]*127;
	 	motor[intakeB] = VexRT[Btn5U]*127 - VexRT[Btn5D]*127;
	 	motor[strafe] = VexRT[Btn8L]*127 - VexRT[Btn8R]*127;
	 	if(SensorValue[towerEncoder] < 200)
	 	{
	 		motor[towerL] = VexRT[Btn6U]*127 - VexRT[Btn6D]*127 - 15;
 			motor[towerR] = VexRT[Btn6U]*127 - VexRT[Btn6D]*127 - 15;
	 	}
	 	else
	 	{
	 		motor[towerL] = VexRT[Btn6U]*127 - VexRT[Btn6D]*127 + 15;
 			motor[towerR] = VexRT[Btn6U]*127 - VexRT[Btn6D]*127 + 15;
 		}
	 	/*if(VexRT[Btn8U])
		{
			//SensorValue[pneumIntake] = 1;
	 	}
	 	else if(VexRT[Btn8D])
		{
			//SensorValue[pneumIntake] = 0;
		}*/
		if(VexRT[Btn7U])
		{
			SensorValue[pneumHouse] = 1;
		}
		else if(VexRT[Btn7D])
		{
			SensorValue[pneumHouse] = 0;
		}
		SensorValue[pneumHouse] = VexRT[Btn7U];
	}
}
